# -*- coding: utf-8 -*-
"""provided_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S-7QBM5-OMfBx4x20Nu6ZLZjZpOsPbnm
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive/18797 Project'

import pandas as pd
import numpy as np
import os 
import matplotlib.pyplot as plt
import gc
import joblib
from collections import defaultdict, Counter

worldCups_file_path = './raw_data/WorldCups.csv'

worldCups_df = pd.read_csv(worldCups_file_path)


dic = defaultdict(int)

worldCups_df

champ_list = list(worldCups_df[worldCups_df['Year']>=1994]['Winner'].values)

champ_dic = defaultdict(int)

for country in champ_list:
  champ_dic[country] += 1

top_four_list = list(worldCups_df[worldCups_df['Year']>=1994]['Winner'].values)+list(worldCups_df[worldCups_df['Year']>=1994]['Runners-Up'].values)\
    +list(worldCups_df[worldCups_df['Year']>=1994]['Third'].values) +list(worldCups_df[worldCups_df['Year']>=1994]['Fourth'].values)

top_four_dic = defaultdict(int)

for country in top_four_list:
  top_four_dic[country] += 1


worldCupMatches_file_path = "/content/drive/MyDrive/18797 Project/raw_data/WorldCupMatches.csv"

wordCupMatches_df = pd.read_csv(worldCupMatches_file_path)

wordCupMatches_df[wordCupMatches_df.Year > 2000.0].head()

import pickle

with open('/content/drive/MyDrive/18797 Project/data/test_x.pkl', 'rb') as f:
    data = pickle.load(f)

data.head()







data_path = './raw_data'

rankings = pd.read_csv(os.path.join(data_path,'fifa_ranking.csv'))
rankings = rankings.loc[:,['rank', 'country_full', 'country_abrv', 'cur_year_avg_weighted', 'rank_date', 
                           'two_year_ago_weighted', 'three_year_ago_weighted']]
rankings = rankings.replace({"IR Iran": "Iran"})
rankings['weighted_points'] =  rankings['cur_year_avg_weighted'] + rankings['two_year_ago_weighted'] + rankings['three_year_ago_weighted']
rankings['rank_date'] = pd.to_datetime(rankings['rank_date'])

matches = pd.read_csv(os.path.join(data_path,'results.csv'))
matches =  matches.replace({'Germany DR': 'Germany', 'China': 'China PR'})
matches['date'] = pd.to_datetime(matches['date'])

world_cup = pd.read_csv(os.path.join(data_path,'World Cup 2018 Dataset.csv'))
world_cup = world_cup.loc[:, ['Team', 'Group', 'First match \nagainst', 'Second match\n against', 'Third match\n against']]
world_cup = world_cup.dropna(how='all')
world_cup = world_cup.replace({"IRAN": "Iran", 
                               "Costarica": "Costa Rica", 
                               "Porugal": "Portugal", 
                               "Columbia": "Colombia", 
                               "Korea" : "Korea Republic"})
world_cup = world_cup.set_index('Team')

# I want to have the ranks for every day 
rankings = rankings.set_index(['rank_date'])\
            .groupby(['country_full'], group_keys=False)\
            .resample('D').first()\
            .fillna(method='ffill')\
            .reset_index()

# join the ranks
matches = matches.merge(rankings, 
                        left_on=['date', 'home_team'], 
                        right_on=['rank_date', 'country_full'])
matches = matches.merge(rankings, 
                        left_on=['date', 'away_team'], 
                        right_on=['rank_date', 'country_full'], 
                        suffixes=('_home', '_away'))

matches.shape

matches.head()

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

matches['rank_difference'] = matches['rank_home'] - matches['rank_away']
matches['average_rank'] = (matches['rank_home'] + matches['rank_away'])/2
matches['point_difference'] = matches['weighted_points_home'] - matches['weighted_points_away']
matches['score_difference'] = matches['home_score'] - matches['away_score']
matches['is_won'] = matches['score_difference'] > 0 # take draw as lost
matches['is_stake'] = matches['tournament'] != 'Friendly'

feats = ['home_team', 'away_team', 'tournament', 'city', 'country', 'neutral', 
       'rank_home', 'country_full_home', 'country_abrv_home',
       'cur_year_avg_weighted_home', 'two_year_ago_weighted_home',
       'three_year_ago_weighted_home', 'weighted_points_home', 
       'rank_away', 'country_full_away', 'country_abrv_away',
       'cur_year_avg_weighted_away', 'two_year_ago_weighted_away',
       'three_year_ago_weighted_away', 'weighted_points_away',
       'rank_difference', 'average_rank'] 
encode = ['home_team', 'away_team', 'city', 'country', 'neutral', 'tournament', 'country_full_home', 
          'country_abrv_home','country_full_away', 'country_abrv_away',]
y1 = ['home_score']
y2 = ['away_score']

matches.shape

matches.columns

len(list(matches['home_team'].astype(str).values)+list(matches['away_team'].astype(str).values))

len(list(matches['home_team'].astype(str).values))

team_list = list(matches['home_team'].astype(str).values)+list(matches['away_team'].astype(str).values)

label_encoder = LabelEncoder()

label_encoder.fit(team_list)

matches['home_team_encoded'] = label_encoder.transform(list(matches['home_team'].astype(str).values))

matches['away_team_encoded'] = label_encoder.transform(list(matches['away_team'].astype(str).values))

!pwd

joblib.dump(label_encoder, '/content/drive/MyDrive/18797 Project/models/label_encoder.joblib')

matches['number_of_champ_home'] = matches.home_team.map(champ_dic)

matches['number_of_champ_away'] = matches.away_team.map(champ_dic)

matches['number_of_topFour_home'] = matches.home_team.map(top_four_dic)

matches['number_of_topFour_away'] = matches.away_team.map(top_four_dic)

"""## Minmax Normalize"""

matches['away_team_encoded'].max()

matches['home_team_encoded'].max()

matches['away_team_encoded'].min()

matches['home_team_encoded'].min()

matches['home_team_encoded_norm'] = (matches['home_team_encoded'] - matches['home_team_encoded'].min()) / (matches['home_team_encoded'].max() - matches['home_team_encoded'].min())

matches['away_team_encoded_norm'] = (matches['away_team_encoded'] - matches['home_team_encoded'].min()) / (matches['home_team_encoded'].max() - matches['home_team_encoded'].min())

matches.head(1)

input_feat = ['average_rank', 'rank_difference', 'point_difference','number_of_champ_home','number_of_champ_away',
              'number_of_topFour_home','number_of_topFour_away',
              'home_team_encoded_norm','away_team_encoded_norm']
output_feat = ['home_score', 'away_score']

train = matches[:int(matches.shape[0] * 0.8)]
val = matches[int(matches.shape[0] * 0.8):]
assert(train.shape[0] + val.shape[0] == matches.shape[0])

train_y = train[output_feat]
val_y = val[output_feat]
train_x = train[input_feat]
val_x = val[input_feat]

train_x.head()

train_x[['average_rank','rank_difference','point_difference']].columns

test_match = pd.DataFrame(np.array([['Uruguay', 'France'], ['Brazil', 'Belgium'], ['Sweden', 'England'], ['Russia', 'Croatia']]), columns=['home', 'away'])
test_result = pd.DataFrame(np.array([[0, 2], [1, 2], [0,2], [3, 4]]), columns=['home_score', 'away_score'])

test_match

test_result

test_x = []
world_cup_rankings = rankings.loc[(rankings['rank_date'] == rankings['rank_date'].max()) & 
                                    rankings['country_full'].isin(world_cup.index.unique())]
world_cup_rankings = world_cup_rankings.set_index(['country_full'])

for i in range(len(test_match)):
    home = test_match.iloc[i, 0]
    away = test_match.iloc[i, 1]
    home_rank = world_cup_rankings.loc[home, 'rank']
    home_points = world_cup_rankings.loc[home, 'weighted_points']
    opp_rank = world_cup_rankings.loc[away, 'rank']
    opp_points = world_cup_rankings.loc[away, 'weighted_points']
    average_rank = (home_rank + opp_rank) / 2
    rank_difference = home_rank - opp_rank
    point_difference = home_points - opp_points
    # average_rank  rank_difference  point_difference  is_stake
    # print([average_rank, rank_difference, point_difference, True])
    home_team = home
    test_x.append([average_rank, rank_difference, point_difference])
test_x = pd.DataFrame(test_x, columns=train_x[['average_rank','rank_difference','point_difference']].columns)
test_y = test_result
test_x

test_x['home_team_encoded'] = label_encoder.transform(list(test_match['home'].astype(str).values))
test_x['away_team_encoded'] = label_encoder.transform(list(test_match['away'].astype(str).values))
test_x['home_team_encoded_norm'] = (test_x['home_team_encoded'] - matches['home_team_encoded'].min()) / (matches['home_team_encoded'].max() - matches['home_team_encoded'].min()) 
test_x['away_team_encoded_norm'] = (test_x['away_team_encoded'] - matches['home_team_encoded'].min()) / (matches['home_team_encoded'].max() - matches['home_team_encoded'].min())

test_x

test_x['number_of_champ_home'] = test_match.home.map(champ_dic)
test_x['number_of_champ_away'] = test_match.away.map(champ_dic)
test_x['number_of_topFour_home'] = test_match.home.map(top_four_dic)
test_x['number_of_topFour_away'] = test_match.away.map(top_four_dic)

test_x

test_match

test_x = test_x[input_feat]

test_x

test_y

save_dir = './data'

train_x.to_pickle(os.path.join(save_dir, 'train_x_v2.pkl'))
train_y.to_pickle(os.path.join(save_dir, 'train_y_v2.pkl'))
val_x.to_pickle(os.path.join(save_dir,'val_x_v2.pkl'))
val_y.to_pickle(os.path.join(save_dir,'val_y_v2.pkl'))
test_x.to_pickle(os.path.join(save_dir, 'test_x_v2.pkl'))
test_y.to_pickle(os.path.join(save_dir, 'test_y_v2.pkl'))

"""## V3"""

import pandas as pd

save_dir = './data'

with open('/content/drive/MyDrive/18797 Project/data/train_x_v2.pkl', 'rb') as f:
    train_x = pickle.load(f)
with open('/content/drive/MyDrive/18797 Project/data/train_y_v2.pkl', 'rb') as f:
    train_y = pickle.load(f)
with open('/content/drive/MyDrive/18797 Project/data/val_x_v2.pkl', 'rb') as f:
    val_x = pickle.load(f)
with open('/content/drive/MyDrive/18797 Project/data/val_y_v2.pkl', 'rb') as f:
    val_y = pickle.load(f)
with open('/content/drive/MyDrive/18797 Project/data/test_x_v2.pkl', 'rb') as f:
    test_x = pickle.load(f)
with open('/content/drive/MyDrive/18797 Project/data/test_y_v2.pkl', 'rb') as f:
    test_y = pickle.load(f)
train_x.head(1)

input_feat = ['rank_difference', 'point_difference','number_of_champ_home','number_of_champ_away',
              'number_of_topFour_home','number_of_topFour_away',
              'home_team_encoded_norm','away_team_encoded_norm']

train_x = train_x[input_feat]
val_x = val_x[input_feat]
test_x = test_x[input_feat]

train_x.to_pickle(os.path.join(save_dir, 'train_x_v3.pkl'))
train_y.to_pickle(os.path.join(save_dir, 'train_y_v3.pkl'))
val_x.to_pickle(os.path.join(save_dir,'val_x_v3.pkl'))
val_y.to_pickle(os.path.join(save_dir,'val_y_v3.pkl'))
test_x.to_pickle(os.path.join(save_dir, 'test_x_v3.pkl'))
test_y.to_pickle(os.path.join(save_dir, 'test_y_v3.pkl'))

